// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	usecase "diary-api/internal/usecase"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *Mockstorage) CreateUser(ctx context.Context, user *usecase.FullUser, diary *usecase.Diary) (*usecase.FullUser, *usecase.Diary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user, diary)
	ret0, _ := ret[0].(*usecase.FullUser)
	ret1, _ := ret[1].(*usecase.Diary)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockstorageMockRecorder) CreateUser(ctx, user, diary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*Mockstorage)(nil).CreateUser), ctx, user, diary)
}

// GetUserByName mocks base method.
func (m *Mockstorage) GetUserByName(ctx context.Context, username string) (*usecase.FullUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, username)
	ret0, _ := ret[0].(*usecase.FullUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockstorageMockRecorder) GetUserByName(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*Mockstorage)(nil).GetUserByName), ctx, username)
}

// MockdiaryRepo is a mock of diaryRepo interface.
type MockdiaryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockdiaryRepoMockRecorder
}

// MockdiaryRepoMockRecorder is the mock recorder for MockdiaryRepo.
type MockdiaryRepoMockRecorder struct {
	mock *MockdiaryRepo
}

// NewMockdiaryRepo creates a new mock instance.
func NewMockdiaryRepo(ctrl *gomock.Controller) *MockdiaryRepo {
	mock := &MockdiaryRepo{ctrl: ctrl}
	mock.recorder = &MockdiaryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdiaryRepo) EXPECT() *MockdiaryRepoMockRecorder {
	return m.recorder
}

// CreateDiary mocks base method.
func (m *MockdiaryRepo) CreateDiary(ctx context.Context, diary *usecase.Diary) (*usecase.Diary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiary", ctx, diary)
	ret0, _ := ret[0].(*usecase.Diary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDiary indicates an expected call of CreateDiary.
func (mr *MockdiaryRepoMockRecorder) CreateDiary(ctx, diary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiary", reflect.TypeOf((*MockdiaryRepo)(nil).CreateDiary), ctx, diary)
}

// MocktokenService is a mock of tokenService interface.
type MocktokenService struct {
	ctrl     *gomock.Controller
	recorder *MocktokenServiceMockRecorder
}

// MocktokenServiceMockRecorder is the mock recorder for MocktokenService.
type MocktokenServiceMockRecorder struct {
	mock *MocktokenService
}

// NewMocktokenService creates a new mock instance.
func NewMocktokenService(ctrl *gomock.Controller) *MocktokenService {
	mock := &MocktokenService{ctrl: ctrl}
	mock.recorder = &MocktokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenService) EXPECT() *MocktokenServiceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MocktokenService) GenerateToken(userID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MocktokenServiceMockRecorder) GenerateToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MocktokenService)(nil).GenerateToken), userID)
}

// RefreshToken mocks base method.
func (m *MocktokenService) RefreshToken(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MocktokenServiceMockRecorder) RefreshToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MocktokenService)(nil).RefreshToken), token)
}
